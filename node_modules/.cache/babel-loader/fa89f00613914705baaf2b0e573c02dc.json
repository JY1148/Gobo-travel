{"ast":null,"code":"import languageReducer from \"./language/LanguageReducer\";\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { productDetailSlice } from \"./productDetail/slice\";\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { productSearchSlice } from \"./productSearch/slice\";\nimport { UserSlice } from \"./user/slice\";\nimport { shoppingCartSlice } from \"./shoppingCart/slice\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { orderSlice } from \"./order/slice\";\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"user\"]\n};\nconst rootReducer = combineReducers({\n  language: languageReducer,\n  recommendProducts: recommendProductsReducer,\n  productDetail: productDetailSlice.reducer,\n  productSearch: productSearchSlice.reducer,\n  user: UserSlice.reducer,\n  shoppingCart: shoppingCartSlice.reducer,\n  order: orderSlice.reducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // const store = createStore(rootReducer, applyMiddleware(thunk, actionLog));\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), actionLog],\n  devTools: true\n});\nconst persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/jinzhouyan/Desktop/react-travel/src/redux/store.ts"],"names":["languageReducer","recommendProductsReducer","actionLog","productDetailSlice","combineReducers","configureStore","productSearchSlice","UserSlice","shoppingCartSlice","persistStore","persistReducer","storage","orderSlice","persistConfig","key","whitelist","rootReducer","language","recommendProducts","productDetail","reducer","productSearch","user","shoppingCart","order","persistedReducer","store","middleware","getDefaultMiddleware","devTools","persistor"],"mappings":"AACA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,MAAMC,aAAa,GAAE;AACjBC,EAAAA,GAAG,EAAE,MADY;AAEjBH,EAAAA,OAFiB;AAGjBI,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHM,CAArB;AAMA,MAAMC,WAAW,GAAGZ,eAAe,CAAC;AAChCa,EAAAA,QAAQ,EAAEjB,eADsB;AAEhCkB,EAAAA,iBAAiB,EAACjB,wBAFc;AAGhCkB,EAAAA,aAAa,EAAEhB,kBAAkB,CAACiB,OAHF;AAIhCC,EAAAA,aAAa,EAAEf,kBAAkB,CAACc,OAJF;AAKhCE,EAAAA,IAAI,EAAEf,SAAS,CAACa,OALgB;AAMhCG,EAAAA,YAAY,EAAEf,iBAAiB,CAACY,OANA;AAOhCI,EAAAA,KAAK,EAAEZ,UAAU,CAACQ;AAPc,CAAD,CAAnC;AAUA,MAAMK,gBAAgB,GAAGf,cAAc,CAACG,aAAD,EAAgBG,WAAhB,CAAvC,C,CAEA;;AACA,MAAMU,KAAK,GAAGrB,cAAc,CAAC;AACzBe,EAAAA,OAAO,EAAEK,gBADgB;AAEzBE,EAAAA,UAAU,EAAGC,oBAAD,IAA0B,CAAC,GAAGA,oBAAoB,EAAxB,EAA4B1B,SAA5B,CAFb;AAGzB2B,EAAAA,QAAQ,EAAE;AAHe,CAAD,CAA5B;AAMA,MAAMC,SAAS,GAAGrB,YAAY,CAACiB,KAAD,CAA9B;AAKA,eAAe;AAAEA,EAAAA,KAAF;AAASI,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport languageReducer from \"./language/LanguageReducer\";\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport thunk from \"redux-thunk\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { productDetailSlice } from \"./productDetail/slice\";\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { productSearchSlice } from \"./productSearch/slice\";\nimport { UserSlice } from \"./user/slice\";\nimport { shoppingCartSlice } from \"./shoppingCart/slice\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport { orderSlice } from \"./order/slice\";\n\nconst persistConfig ={\n    key: \"root\",\n    storage,\n    whitelist: [\"user\"]\n}\n\nconst rootReducer = combineReducers({\n    language: languageReducer,\n    recommendProducts:recommendProductsReducer,\n    productDetail: productDetailSlice.reducer,\n    productSearch: productSearchSlice.reducer,\n    user: UserSlice.reducer,\n    shoppingCart: shoppingCartSlice.reducer,\n    order: orderSlice.reducer \n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// const store = createStore(rootReducer, applyMiddleware(thunk, actionLog));\nconst store = configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => [...getDefaultMiddleware(), actionLog],\n    devTools: true,\n})\n\nconst persistor = persistStore(store)\n\n\nexport type RootState = ReturnType<typeof store.getState>\n\nexport default { store, persistor };"]},"metadata":{},"sourceType":"module"}