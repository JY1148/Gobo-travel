{"ast":null,"code":"import languageReducer from \"./language/LanguageReducer\";\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { productDetailSlice } from \"./productDetail/slice\";\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { productSearchSlice } from \"./productSearch/slice\";\nimport { UserSlice } from \"./user/slice\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"user\"]\n};\nconst rootReducer = combineReducers({\n  language: languageReducer,\n  recommendProducts: recommendProductsReducer,\n  productDetail: productDetailSlice.reducer,\n  productSearch: productSearchSlice.reducer,\n  user: UserSlice.reducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer); // const store = createStore(rootReducer, applyMiddleware(thunk, actionLog));\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), actionLog],\n  devTools: true\n});\nconst persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/jinzhouyan/Desktop/react-travel/src/redux/store.ts"],"names":["languageReducer","recommendProductsReducer","actionLog","productDetailSlice","combineReducers","configureStore","productSearchSlice","UserSlice","persistStore","persistReducer","storage","persistConfig","key","whitelist","rootReducer","language","recommendProducts","productDetail","reducer","productSearch","user","persistedReducer","store","middleware","getDefaultMiddleware","devTools","persistor"],"mappings":"AACA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,aAAa,GAAE;AACjBC,EAAAA,GAAG,EAAE,MADY;AAEjBF,EAAAA,OAFiB;AAGjBG,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHM,CAArB;AAMA,MAAMC,WAAW,GAAGV,eAAe,CAAC;AAChCW,EAAAA,QAAQ,EAAEf,eADsB;AAEhCgB,EAAAA,iBAAiB,EAACf,wBAFc;AAGhCgB,EAAAA,aAAa,EAAEd,kBAAkB,CAACe,OAHF;AAIhCC,EAAAA,aAAa,EAAEb,kBAAkB,CAACY,OAJF;AAKhCE,EAAAA,IAAI,EAAEb,SAAS,CAACW;AALgB,CAAD,CAAnC;AAQA,MAAMG,gBAAgB,GAAGZ,cAAc,CAACE,aAAD,EAAgBG,WAAhB,CAAvC,C,CAEA;;AACA,MAAMQ,KAAK,GAAGjB,cAAc,CAAC;AACzBa,EAAAA,OAAO,EAAEG,gBADgB;AAEzBE,EAAAA,UAAU,EAAGC,oBAAD,IAA0B,CAAC,GAAGA,oBAAoB,EAAxB,EAA4BtB,SAA5B,CAFb;AAGzBuB,EAAAA,QAAQ,EAAE;AAHe,CAAD,CAA5B;AAMA,MAAMC,SAAS,GAAGlB,YAAY,CAACc,KAAD,CAA9B;AAKA,eAAe;AAAEA,EAAAA,KAAF;AAASI,EAAAA;AAAT,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport languageReducer from \"./language/LanguageReducer\";\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport thunk from \"redux-thunk\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { productDetailSlice } from \"./productDetail/slice\";\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nimport { productSearchSlice } from \"./productSearch/slice\";\nimport { UserSlice } from \"./user/slice\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nconst persistConfig ={\n    key: \"root\",\n    storage,\n    whitelist: [\"user\"]\n}\n\nconst rootReducer = combineReducers({\n    language: languageReducer,\n    recommendProducts:recommendProductsReducer,\n    productDetail: productDetailSlice.reducer,\n    productSearch: productSearchSlice.reducer,\n    user: UserSlice.reducer\n})\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\n// const store = createStore(rootReducer, applyMiddleware(thunk, actionLog));\nconst store = configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => [...getDefaultMiddleware(), actionLog],\n    devTools: true,\n})\n\nconst persistor = persistStore(store)\n\n\nexport type RootState = ReturnType<typeof store.getState>\n\nexport default { store, persistor };"]},"metadata":{},"sourceType":"module"}