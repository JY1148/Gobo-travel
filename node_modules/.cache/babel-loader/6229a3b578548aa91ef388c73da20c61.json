{"ast":null,"code":"import languageReducer from \"./language/LanguageReducer\";\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { productDetailSlice } from \"./productDetail/slice\";\nimport { combineReducers, configureStore } from \"@reduxjs/toolkit\";\nconst rootReducer = combineReducers({\n  language: languageReducer,\n  recommendProducts: recommendProductsReducer,\n  productDetail: productDetailSlice.reducer\n}); // const store = createStore(rootReducer, applyMiddleware(thunk, actionLog));\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), actionLog],\n  devTools: true\n});\nexport default store;","map":{"version":3,"sources":["/Users/jinzhouyan/Desktop/react-travel/src/redux/store.ts"],"names":["languageReducer","recommendProductsReducer","actionLog","productDetailSlice","combineReducers","configureStore","rootReducer","language","recommendProducts","productDetail","reducer","store","middleware","getDefaultMiddleware","devTools"],"mappings":"AACA,OAAOA,eAAP,MAA4B,4BAA5B;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAsE,kBAAtE;AAEA,MAAMC,WAAW,GAAGF,eAAe,CAAC;AAChCG,EAAAA,QAAQ,EAAEP,eADsB;AAEhCQ,EAAAA,iBAAiB,EAACP,wBAFc;AAGhCQ,EAAAA,aAAa,EAAEN,kBAAkB,CAACO;AAHF,CAAD,CAAnC,C,CAMA;;AACA,MAAMC,KAAK,GAAGN,cAAc,CAAC;AACzBK,EAAAA,OAAO,EAAEJ,WADgB;AAEzBM,EAAAA,UAAU,EAAGC,oBAAD,IAA0B,CAAC,GAAGA,oBAAoB,EAAxB,EAA4BX,SAA5B,CAFb;AAGzBY,EAAAA,QAAQ,EAAE;AAHe,CAAD,CAA5B;AAOA,eAAeH,KAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport languageReducer from \"./language/LanguageReducer\";\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport thunk from \"redux-thunk\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { productDetailSlice } from \"./productDetail/slice\";\nimport { combineReducers, configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n\nconst rootReducer = combineReducers({\n    language: languageReducer,\n    recommendProducts:recommendProductsReducer,\n    productDetail: productDetailSlice.reducer\n})\n\n// const store = createStore(rootReducer, applyMiddleware(thunk, actionLog));\nconst store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => [...getDefaultMiddleware(), actionLog],\n    devTools: true,\n})\nexport type RootState = ReturnType<typeof store.getState>\n\nexport default store;"]},"metadata":{},"sourceType":"module"}